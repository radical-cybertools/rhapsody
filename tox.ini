[tox]
min_version = 4.0
envlist = py39,py310,py311,py312,py313,lint,type,docs,security,safety,integration
skip_missing_interpreters = true

[gh-actions]
python =
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[testenv]
deps =
    pytest
    pytest-cov
    pytest-xdist
    .[dev,tracing,metrics,serialization]
setenv =
    OBSERVE_DISABLE_TRACING = 1
    OBSERVE_DISABLE_OTLP = 1
commands =
    pytest {posargs} --cov=observe --cov-report=xml --cov-report=term-missing -n auto

[testenv:lint]
deps = .[dev]
commands =
    ruff check src/ --fix
    ruff format src/

[testenv:lint-check]
deps = .[dev]
commands =
    ruff check src/
    ruff format --check src/

[testenv:quick-lint]
deps = .[dev]
commands =
    ruff check src/ --fix --extend-ignore=F401,F811,B007,T201

[testenv:lint-all]
deps = .[dev]
commands =
    ruff check . --fix
    ruff format .

[testenv:lint-docs]
deps = .[dev]
commands =
    ruff check docs/ --fix --extend-ignore=E402,F841,E722


[testenv:type]
deps = .[dev,serialization]
commands =
    mypy src/observe

[testenv:docs]
deps = .[docs,notebooks]
allowlist_externals = python, mkdocs
commands =
    mkdocs build --strict

[testenv:security]
deps =
    bandit[toml]
    .[dev]
commands =
    bandit -r src -f json -o bandit-report.json --severity-level medium
    bandit -r src --severity-level medium

[testenv:safety]
deps =
    pip-audit
    .[dev]
commands =
    pip-audit --desc --format=json --output=pip-audit.json
    pip-audit --desc

[testenv:integration]
deps =
    pytest
    pytest-asyncio
    psycopg2-binary
    .[dev,tracing,metrics,serialization]
commands =
    pytest tests/integration/ {posargs}

; [testenv:notebooks]
; deps =
;     nbconvert
;     seaborn
;     aiofiles
;     memory_profiler
;     scipy
;     .[notebooks]
; commands =
;     python -c "import os; os.makedirs('.tox/notebooks', exist_ok=True)"
;     jupyter nbconvert --to notebook --execute docs/tutorials/*.ipynb --output-dir=.tox/notebooks

[testenv:clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:report]
deps = coverage
skip_install = true
commands =
    coverage report
    coverage html
