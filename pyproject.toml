[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rhapsody"
version = "0.1.0"
description = "Runtime system for executing heterogeneous HPC-AI workflows with dynamic task graphs on high-performance computing infrastructures."
license = { text = "MIT" }
authors = [
    { name = "RADICAL Research Team", email = "info@radical.org" }
]
keywords = [
    "hpc",
    "ai",
    "workflow",
    "orchestration",
    "task-graph",
    "distributed-computing",
    "high-performance-computing",
    "scientific-computing",
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: System :: Logging",
    "Topic :: System :: Monitoring",
    "Intended Audience :: Developers",
]
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.0.0",
    "typeguard>=4.0.0",
    "requests>=2.25.0",
]

[project.optional-dependencies]
# Backend-specific dependencies
dask = ["dask[distributed]>=2023.0.0"]
radical_pilot = ["radical.pilot>=1.30.0"]

# Development and testing
dev = [
    "ruff>=0.8.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.0.0",
    "types-requests>=2.31.0",
    "types-aiofiles>=23.0.0",
    "pre-commit>=4.3.0",
    "docformatter>=1.7.0",
    "tomli>=2.2.0",
    "detect-secrets>=1.5.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]
ci = [
    "tox>=4.0.0",
    "tox-gh-actions>=3.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
    "psutil>=5.9.0",
]
examples = [
    # Examples may use different backends
    "rhapsody[dask]",
]

# Complete installation with all backends
backends = [
    "rhapsody[dask,radical_pilot]"
]

all = [
    "rhapsody[dev,docs,ci,examples,backends]"
]

[project.urls]
Homepage = "https://github.com/stride-research/rhapsody"
Repository = "https://github.com/stride-research/rhapsody"
Issues = "https://github.com/stride-research/rhapsody/issues"

[project.scripts]
rhapsody-test-ci = "rhapsody.cli.test_ci:main"

# Entry points for backend discovery
[project.entry-points."rhapsody.backends"]
noop = "rhapsody.backends.execution.noop:NoopExecutionBackend"
concurrent = "rhapsody.backends.execution.concurrent:ConcurrentExecutionBackend"
dask = "rhapsody.backends.execution.dask_parallel:DaskExecutionBackend"
radical_pilot = "rhapsody.backends.execution.radical_pilot:RadicalExecutionBackend"

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--tb=short"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
asyncio_default_test_loop_scope = "function"
markers = [
    "slow: marks tests as slow-running"
]

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (basic security)
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Allow raising exceptions without from
    "B039",  # Allow mutable defaults for ContextVar (common pattern)
    "S101",  # Allow assert statements
    "S311",  # Allow standard pseudo-random generators (not cryptographic use)
    "S603",  # Allow subprocess calls (trusted input in CLI tools)
    "T201",  # Allow print statements (common in CLI tools)
    "PT011", # Allow broad pytest.raises
    "N999",  # Allow module names with numbers
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["F401", "F841", "F811", "S", "T20", "PT", "B017"]  # Allow unused imports, variables, redefinitions, security, prints, pytest style, broad exceptions in tests
"docs/*" = ["E402", "F841", "E722", "F401", "T20", "S", "B007"]  # More lenient for docs/examples, allow unused loop variables
"examples/*" = ["E402", "F841", "E722", "F401", "T20", "S", "B007"]  # More lenient for examples
"docs/tutorials/*" = ["E402", "F841", "E722", "F401", "T20", "S", "B007"]  # Allow notebook-style code, unused loop variables
"src/observe/serialization/formats/handlers/*" = ["F401"]  # Allow imports for availability checking
"src/observe/cli/*" = ["T20"]  # Allow print statements in CLI tools

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["observe"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "opentelemetry.*",
    "prometheus_client.*",
    "lz4.*",
    "snappy.*",
    "zstandard.*",
    "blosc.*",
    "psutil.*",
]
ignore_missing_imports = true
